# Generated by Django 3.0.7 on 2022-12-27 15:18

import re

from alive_progress import alive_bar
from django.db import migrations


def extract_location(message, Location, db_alias):
    if message.content == "LOCATION":
        lat, lon = re.search(r"q=([\d.-]+),([\d.-]+)", message.media_string).groups()
    elif message.content.startswith("LAT:"):
        lat, lon = re.search(r"LAT: ([\d.-]+)<br>LONG: ([\d.-]+)", message.content).groups()
    else:
        return False

    loc = Location.objects.using(db_alias).create(latitude=lat, longitude=lon)
    message.location = loc

    return True


def extract_poll(message, Poll, PollAnswer, db_alias):
    if message.msg_type == 6:
        if not message.media_string:
            question, stats = message.content.split("<br><br>")
            variants = [variant.split(": ") for variant in stats.split("<br>")]
            total = int(variants[0][1])
            answers = [{"text": v[0], "voters": int(v[1])} for v in variants[1:]]
        else:
            question = message.media_string
            variants_str, total_str = message.content.split("<br>Total: ")
            total = int(total_str.split()[0])
            variants = [variant.replace("- ", "").split(" : ") for variant in variants_str.replace("<br>", "", 1).split("<br>")]
            try:
                answers = [{"text": v[0], "voters": int(v[1])} for v in variants]
            except IndexError:
                print(message.tg_id)
                return False

        poll_data = dict(
            question=question.strip(),
            total_voters=total,
        )
        poll = Poll.objects.using(db_alias).create(**poll_data)
        [PollAnswer.objects.using(db_alias).create(poll=poll, **answer) for answer in answers]

        message.poll = poll

        return True
    else:
        return False


def adapt_media(message, MediaFile, db_alias):
    if message.msg_type in (6, 7):
        return False

    if message.media_string and not message.content.startswith("NOT LOADED: "):
        is_downloaded = True
    else:
        is_downloaded = False

    media_type = None
    if message.msg_type == 9:
        if message.media_string.startswith("voice_message"):
            media_type = "voice_message"
        elif message.media_string.endswith(".mp3"):
            media_type = "audio_file"
            message.msg_type = 11
        else:
            message.msg_type = 100
    elif message.msg_type == 1:
        media_type = "animation"
    elif message.msg_type in (2, 8):
        media_type = "sticker"
    elif message.msg_type == 3:
        media_type = "photo"
    elif message.msg_type == 4:
        media_type = "photo_file"
    elif message.msg_type == 5:
        media_type = "video_file"

    mfile = MediaFile.objects.using(db_alias).create(
        is_downloaded=is_downloaded,
        media_type=media_type,
        file_path=message.media_string,
    )
    message.media = mfile

    return True


def forward(apps, schema_editor):
    Message = apps.get_model("mainapp", "Message")
    Location = apps.get_model("mainapp", "Location")
    MediaFile = apps.get_model("mainapp", "MediaFile")
    Poll = apps.get_model("mainapp", "Poll")
    PollAnswer = apps.get_model("mainapp", "PollAnswer")
    db_alias = schema_editor.connection.alias

    qs = Message.objects.using(db_alias).exclude(msg_type=0)
    with alive_bar(qs.count()) as bar:
        for i, message in enumerate(qs):
            changed = False
            changed = changed or extract_poll(message, Poll, PollAnswer, db_alias)
            changed = changed or extract_location(message, Location, db_alias)
            changed = changed or adapt_media(message, MediaFile, db_alias)
            if changed:
                message.save()
            bar()


def backward(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('mainapp', '0004_auto_20221223_1623'),
    ]

    operations = [
        migrations.RunPython(
            forward, backward
        ),
    ]
